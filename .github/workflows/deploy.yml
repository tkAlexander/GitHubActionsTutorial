name: Build, test and push RabbitMQ images

on:
  push:
    branches:
      - 'master'

env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID || '942465369820' }}
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  AWS_REPOSITORY: 'enterprise-rabbitmq'

jobs:
  list-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      -
        id: set-matrix
        uses: ./.github/actions/list-versions
  
  deploy-test:
    environment: Test
    if: ${{ needs.list-versions.outputs.matrix != '[]' && needs.list-versions.outputs.matrix != '' }}
    needs:
      - list-versions
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        version: ${{ fromJson(needs.list-versions.outputs.matrix) }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      #      -
      #        name: Docker meta
      #        id: meta
      #        run: |
      #          echo "TAGS=${{ matrix.version }} >> "$GITHUB_ENV"
      #      -
      #        name: Set up QEMU
      #        uses: docker/setup-qemu-action@v3
      #      -
      #        name: Set up Docker Buildx
      #        uses: docker/setup-buildx-action@v3
      #      -
      #        name: Configure AWS Credentials
      #        uses: aws-actions/configure-aws-credentials@v4
      #        with:
      #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #          aws-region: ${{ env.AWS_REGION }}
      #      -
      #        name: Login to ECR
      #        uses: docker/login-action@v3
      #        with:
      #          registry: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
   
      -
        name: Build and push to test
        run: |
          echo Build and push to development
          echo ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.AWS_REPOSITORY }}:${{ matrix.version }}_test
          echo ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com${{ env.AWS_REPOSITORY }}:${{ matrix.version }}_b${{ github.run_number }}

  deploy-production:
    environment: Production
    if: ${{ needs.list-versions.outputs.matrix != '[]' && needs.list-versions.outputs.matrix != '' }}
    needs:
      - list-versions
      - deploy-test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        version: ${{ fromJson(needs.list-versions.outputs.matrix) }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Build and push to production
        #        uses: docker/build-push-action@v5
        run: |
          echo Build and push to production
          echo ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.AWS_REPOSITORY }}:${{ matrix.version }}_stable         
#        with:
#          build-args: |
#            AWS_ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID }}
#            AWS_SECRET_ACCESS_KEY
#            AWS_ACCESS_KEY_ID
#            AWS_SESSION_TOKEN
#          context: ./${{ matrix.version }}
#          platforms: ${{ env.PLATFORM }}
#          push: true
#          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.AWS_REPOSITORY }}:${{ matrix.version }}
